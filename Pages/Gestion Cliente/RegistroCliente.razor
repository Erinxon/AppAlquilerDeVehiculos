@page "/AgregarClientes"
@attribute [Authorize]
@inject IJSRuntime JsRuntime
@inject IServicesPersona servicesPersona
@inject IWebHostEnvironment env
@using System.Net.Http.Json
@using System.Net.Http
@inject AlquilerVehiculoDbContext db

<PageTitle Value="Agregar Clientes" />
<PageHeading Value="Agregar Clientes" />

<div class="container mt-3 d-flex justify-content-center shadow p-3 mb-5 bg-white rounded">
    <form class="well form-horizontal" action=" " method="post" id="contact_form">
        <fieldset>
            <div class="input-group mt-3 w-70">
                <label for="cedula" class="input-group-text" style="height: 38px">Cedula</label>
                <input id="cedula" type="text" @bind-value="Cedula_" class="form-control" maxlength="11" placeholder="Sin guiones">
                <div class="input-group-append">
                    <button @onclick:preventDefault @onclick="CedReal" style="height: 38px" class="btn btn-success">Buscar</button>
                </div>
            </div>
            <br />
            @if (fallo != "")
            {
                <div class="alert alert-danger" role="alert">
                    @fallo
                </div>}
            @if (clientes != null)
            {
                <EditForm Model="clientes" OnValidSubmit="Valido">
                    <FluentValidationValidator />
                    <br />
                    <InputText @bind-Value="clientes.Nombre" class="form-control"  placeholder="Nombre" />
                    <ValidationMessage For="@(() => clientes.Nombre)" />
                    <br />
                    <InputText @bind-Value="clientes.Apellido" class="form-control" placeholder="Apellido" />
                    <ValidationMessage For="@(() => clientes.Apellido)" />
                    <br />
                    <InputText @bind-Value="clientes.Correo" id="correoCliente" class="form-control" placeholder="example@gmail.com" />
                    <ValidationMessage For="@(() => clientes.Correo)" />
                    <br />
                    <InputText @bind-Value="clientes.Licencia" id="LicenciaCliente" class="form-control" placeholder="Licencia" />
                    <ValidationMessage For="@(() => clientes.Licencia)" />
                    <br />
                    <InputText @bind-Value="clientes.Nacionalidad" class="form-control" placeholder="Nacionalidad" />
                    <ValidationMessage For="@(() => clientes.Nacionalidad)" />
                    <br />

                    <InputSelect @bind-Value="clientes.TipoSangre" class="form-control" placeholder="Tipo de sangre">
                        <option value="" disabled selected>Tipo de sangre</option>
                        <option value="A+">A+</option>
                        <option value="A-">A-</option>
                        <option value="AB+">AB+</option>
                        <option value="AB-">AB-</option>
                        <option value="B+">B+</option>
                        <option value="B-">B-</option>
                        <option value="O+">O+</option>
                        <option value="O-">O-</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => clientes.TipoSangre)" />
                    <br />
                    <div class="col-md-12 mb-3">
                        <label>Foto de Licencia</label>
                        <InputFile OnChange="OnInputFileChange" class="form-control" type="file" @bind-Value="@clientes.FotoLicencia" />
                        <ValidationMessage For="@(() => clientes.FotoLicencia)" />
                    </div>
                    <br />
                    <div class="d-grid gap-2">
                        <center><button type="Submit" class="btn btn-success" id="addCliente">Agregar Cliente</button></center>
                    </div>
                    <br />
                    <br />
                </EditForm>
            }
        </fieldset>
    </form>
</div>

@code {
    private string Cedula_ = "";
    private string ced = "";
    private string fallo = "";


    private Cliente clientes = new Cliente();
    private bool agregada = false;
    private bool newper = true;
    HttpClient http = new HttpClient();
    CedulaValida cedulaval = new CedulaValida();
    private IJSObjectReference jSObjectReference;
    IReadOnlyList<IBrowserFile> selectedFiles;

    private async Task CedReal()
    {

        ced = Cedula_.Replace("-", "").Replace(" ", "");

        if (!FuncionesValid.CedulaValida(ced))
        {
            fallo = "La cedula ingresada no es valida o no existe, repita";
            return;
        }
        await metCedula();
    }

    private async Task metCedula()
    {
        try
        {
            Cliente c = db.Clientes.Where(x => x.Cedula == ced).FirstOrDefault();
            if (c != null)
            {
                await jSObjectReference.InvokeVoidAsync("mensajeError", "El cliente que intenta registrar ya está registrado");
            }
            else
            {
                GetApi();
            }
            fallo = "";
        }
        catch (Exception ex)
        {
            fallo = ex.Message;
        }
    }


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarJs();
        }
    }

    private async Task CargarJs()
    {
        jSObjectReference = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Utils.js");
    }

    private async void GetApi()
    {
        string api = $"https://api.adamix.net/apec/cedula/{ced}";
        try
        {
            CedulaValida cedulita = await http.GetFromJsonAsync<CedulaValida>(api);
            Validacion(cedulita);
        }
        catch (Exception ex)
        {
            fallo = ex.Message;
        }

        fallo = "";
        StateHasChanged();
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        foreach (var file in selectedFiles)
        {
            clientes.FotoLicencia = file.Name;
        }
    }


    public void Validacion(CedulaValida cedulita)
    {
        string nombre = cedulita.Nombres;
        string apellido = cedulita.Apellido1 + " " + cedulita.Apellido2;

        clientes = new Cliente
        {
            Cedula = Cedula_,
            Nombre = nombre,
            Apellido = apellido,
            FotoPersona = cedulita.foto
        };

    }


    private async void Valido()
    {
        await Loanding(true);
        Cliente c = db.Clientes.Where(x => x.Cedula == ced).FirstOrDefault();
        if (c != null)
        {
            await Loanding(false);
            await jSObjectReference.InvokeVoidAsync("mensajeError", "El cliente que intenta registrar ya está registrado");
        }
        else if (servicesPersona.IsExistLicencia(clientes.Licencia))
        {
            await Loanding(false);
            await jSObjectReference.InvokeVoidAsync("addValidation", "1px solid red", "LicenciaCliente", "invalid");
            await jSObjectReference.InvokeVoidAsync("mensajeError",
            $"La licencia '{clientes.Licencia}' ya existe, por favor intente con otra");
        }
        else if (servicesPersona.IsExistCorreo(clientes.Correo))
        {
            await Loanding(false);
            await jSObjectReference.InvokeVoidAsync("addValidation", "1px solid red", "correoCliente", "invalid");
            await jSObjectReference.InvokeVoidAsync("mensajeError",
            $"El correo '{clientes.Correo}' ya existe, por favor intente con otro");
        }
        else
        {
            clientes.Ishabilitado = 1;
            foreach (var file in selectedFiles)
            {
                Stream stream = file.OpenReadStream();
                var path = $"{env.WebRootPath}\\Imagenes\\ImgClientes\\{file.Name}";
                FileStream fs = File.Create(path);
                await stream.CopyToAsync(fs);
                stream.Close();
                fs.Close();
            }
            await Loanding(false);
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Estas Seguro de añadir?");
            await Loanding(true);
            if (confirmed)
            {
                await servicesPersona.SavePersona(clientes);
                await Loanding(false);
                await jSObjectReference.InvokeVoidAsync("addValidation", "1px solid #26b050", "correoCliente", "valid");
                await jSObjectReference.InvokeVoidAsync("addValidation", "1px solid #26b050", "LicenciaCliente", "valid");
                clientes = new Cliente();
                await jSObjectReference.InvokeVoidAsync("ClearInput");
                c = null;
                Cedula_ = "";
                StateHasChanged();
            }
        }
    }
    private async Task Limpiar()
    {
        await jSObjectReference.InvokeVoidAsync("ClearInput");
        clientes = new Cliente();
    }

    private async Task Loanding(bool isLoanding)
    {
        await jSObjectReference.InvokeVoidAsync("LoandingButton", isLoanding, "addCliente", "Agregar Cliente");
    }

}
