@page "/EditarUsuario/{Id:int}"
@attribute [Authorize]
@inject IServicesUsuarios servicesUsuarios
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager

<PageTitle Value="Editar usuario" />
<PageHeading Value="Editar usuario" />


<div class="container shadow p-3 mb-5 bg-white rounded">
    @if (usuarioViewModel != null)
    {
        <EditForm class="needs-validation" Model="@usuarioViewModel" OnValidSubmit="@Guardar">
            <h3 class="text-center bt-2">Editar Usuario</h3>
            <FluentValidationValidator />
            <div class="form-row">
                <div class="col-md-6 mb-3">
                    <label>Nombre de usuario</label>
                    <InputText type="text" id="NombreUsuario" @bind-Value="@usuarioViewModel.NombreUsuario" class="form-control" />
                    <ValidationMessage For="@(() => usuarioViewModel.NombreUsuario)" />
                </div>
                <div class="col-md-6 mb-3">
                    <label>Correo</label>
                    <InputText id="CorreoUsuario" @bind-Value="@usuarioViewModel.Correo" class="form-control" />
                    <ValidationMessage For="@(() => usuarioViewModel.Correo)" />
                </div>
                <div class="col-md-6 mb-3">
                    <label>Nombre</label>
                    <InputText id="Nombre" @bind-Value="@usuarioViewModel.Nombre" class="form-control" />
                    <ValidationMessage For="@(() => usuarioViewModel.Nombre)" />
                </div>
                <div class="col-md-6 mb-3">
                    <label>Apellido</label>
                    <InputText id="Apellido" @bind-Value="@usuarioViewModel.Apellido" class="form-control" />
                    <ValidationMessage For="@(() => usuarioViewModel.Apellido)" />
                </div>
                <div class="col-md-6 mb-3">
                    <label>Contraseña</label>
                    <InputText type="password" id="Pass" @bind-Value="@usuarioViewModel.Pass" class="form-control" />
                    <ValidationMessage For="@(() => usuarioViewModel.Pass)" />
                </div>
                <div class="col-md-6 mb-3">
                    <label>Repetir la Contraseña</label>
                    <InputText type="password" id="ConfirmPass" @bind-Value="@usuarioViewModel.ConfirmPass" class="form-control" />
                    <ValidationMessage For="@(() => usuarioViewModel.ConfirmPass)" />
                </div>
            </div>
            <button class="btn btn-primary btn-lg btn-block" id="editUsuario">Guardar</button>
            <button class="btn btn-secondary btn-lg btn-block mb-3" @onclick:preventDefault @onclick="@Redirect">Cancelar</button>
        </EditForm>
    }
    else
    {
        <Spinner />
    }

</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private UsuarioViewModel usuarioViewModel { get; set; }
    Usuario Usuario { get; set; }
    private string LastNombreUsuario { get; set; }
    private string LastCorreoUsuario { get; set; }
    private IJSObjectReference jSObjectReference;

    protected async override Task OnInitializedAsync()
    {
        usuarioViewModel = new UsuarioViewModel();
        Usuario = await servicesUsuarios.GetUsuarioById(Id);
        if (Usuario != null)
        {
            LastNombreUsuario = Usuario.NombreUsuario;
            LastCorreoUsuario = Usuario.Correo;
            usuarioViewModel.NombreUsuario = Usuario.NombreUsuario;
            usuarioViewModel.Correo = Usuario.Correo;
            usuarioViewModel.Nombre = Usuario.Nombre;
            usuarioViewModel.Apellido = Usuario.Apellido;
            usuarioViewModel.Pass = Usuario.Pass;
            usuarioViewModel.ConfirmPass = Usuario.Pass;
        }
        else
        {
            navigationManager.NavigateTo("/");
        }

    }

    private async Task Guardar()
    {
        try
        {
            await Loanding(true);
            if (servicesUsuarios.IsExistCorreo(usuarioViewModel.Correo) && LastCorreoUsuario !=
                usuarioViewModel.Correo)
            {
                await Loanding(false);
                await jSObjectReference.InvokeVoidAsync("addValidation", "1px solid red", "CorreoUsuario", "invalid");
                await jSObjectReference.InvokeVoidAsync("mensajeError",
                    $"El correo '{usuarioViewModel.Correo}' ya existe, por favor intente con otro");
            }
            else if (servicesUsuarios.IsExist(usuarioViewModel.NombreUsuario) &&
            LastNombreUsuario.ToLower() != usuarioViewModel.NombreUsuario.ToLower())
            {
                await Loanding(false);
                await jSObjectReference.InvokeVoidAsync("addValidation", "1px solid red", "NombreUsuario", "invalid");
                await jSObjectReference.InvokeVoidAsync("mensajeError",
                    $"El nombre de usuario '{usuarioViewModel.NombreUsuario}' ya existe, por favor intente con otro");
            }
            else
            {
                await jSObjectReference.InvokeVoidAsync("addValidation", "1px solid #26b050", "NombreUsuario", "valid");
                await jSObjectReference.InvokeVoidAsync("addValidation", "1px solid #26b050", "CorreoUsuario", "valid");
                Usuario.NombreUsuario = usuarioViewModel.NombreUsuario;
                Usuario.Correo = usuarioViewModel.Correo;
                Usuario.Nombre = usuarioViewModel.Nombre;
                Usuario.Apellido = usuarioViewModel.Apellido;
                Usuario.Pass = usuarioViewModel.Pass;
                await servicesUsuarios.EditUsuario(Usuario);
                await Loanding(false);
                Redirect();
            }
        }
        catch (Exception ex)
        {
            await Loanding(false);
            await jSObjectReference.InvokeVoidAsync("mensajeError",
               ex.Message);
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarJs();
        }
    }

    private async Task CargarJs()
    {
        jSObjectReference = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./Utils.js");
    }

    private void Redirect()
    {
        navigationManager.NavigateTo("/Usuarios", true);

    }

    private async Task Loanding(bool isLoanding)
    {
        await jSObjectReference.InvokeVoidAsync("LoandingButton", isLoanding, "editUsuario", "Guardar");
    }

}
